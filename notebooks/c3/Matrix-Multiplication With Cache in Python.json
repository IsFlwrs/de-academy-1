{"paragraphs":[{"text":"%md\n# Matrix multiplication and cache\n\nWelcome to the notebook with the asasignment for the third session. You’re well on your way to obtain the Wizeline Certification for Big Data Engineering with Spark!\n\nIf you have any feedback about our courses, email us at academy@wizeline.com or use the Academy Slack channel.","user":"anonymous","dateUpdated":"2018-08-20T23:10:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Matrix multiplication and cache</h1>\n<p>Welcome to the notebook with the asasignment for the third session. You’re well on your way to obtain the Wizeline Certification for Big Data Engineering with Spark!</p>\n<p>If you have any feedback about our courses, email us at <a href=\"mailto:&#x61;&#x63;&#x61;d&#x65;my&#64;&#119;&#105;&#122;e&#108;&#105;&#110;&#x65;&#x2e;&#x63;&#x6f;&#109;\">&#x61;&#x63;&#x61;d&#x65;my&#64;&#119;&#105;&#122;e&#108;&#105;&#110;&#x65;&#x2e;&#x63;&#x6f;&#109;</a> or use the Academy Slack channel.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003766_563704280","id":"20180815-184319_767984790","dateCreated":"2018-08-20T18:16:43+0000","dateStarted":"2018-08-20T23:10:36+0000","dateFinished":"2018-08-20T23:10:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17330"},{"text":"%md\n## Big Matrix Multiplication Example\n\nIn this example, you will be able to compare with different caching on a big Matrix multiplication on a larger dataset than the one you’ve used so far.\n\nYou will be challenged to work with one big Dataset, transform them into `CoordinateMatrix` object, convert it to a `BlockMatrix`, and calculate a polynomial with that matrix\n","user":"anonymous","dateUpdated":"2018-08-20T23:11:03+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Big Matrix Multiplication Example</h2>\n<p>In this example, you will be able to compare with different caching on a big Matrix multiplication on a larger dataset than the one you’ve used so far.</p>\n<p>You will be challenged to work with one big Dataset, transform them into <code>CoordinateMatrix</code> object, convert it to a <code>BlockMatrix</code>, and calculate a polynomial with that matrix</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003766_563704280","id":"20180816-044039_285868597","dateCreated":"2018-08-20T18:16:43+0000","dateStarted":"2018-08-20T23:11:03+0000","dateFinished":"2018-08-20T23:11:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17331"},{"text":"%md\n\nThe file is formatted with the following characteristics:\n    - Each line in the text file is a row in the matrix. \n    - They are comma-separated values. \n    - The first value is the row index starting at one, the remaining values are the Matrix values.","user":"anonymous","dateUpdated":"2018-08-20T23:11:22+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The file is formatted with the following characteristics:<br/> - Each line in the text file is a row in the matrix.<br/> - They are comma-separated values.<br/> - The first value is the row index starting at one, the remaining values are the Matrix values.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003767_563319531","id":"20180816-050807_2103207409","dateCreated":"2018-08-20T18:16:43+0000","dateStarted":"2018-08-20T23:11:22+0000","dateFinished":"2018-08-20T23:11:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17332"},{"text":"%md\n\nFirst, import the libraries to use during the session with the following command:","user":"anonymous","dateUpdated":"2018-08-20T23:11:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>First, import the libraries to use during the session with the following command:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534806688953_-1481251825","id":"20180820-231128_1238566574","dateCreated":"2018-08-20T23:11:28+0000","dateStarted":"2018-08-20T23:11:31+0000","dateFinished":"2018-08-20T23:11:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17333"},{"text":"%pyspark\nfrom pyspark.sql.functions import array, posexplode\nfrom pyspark.mllib.linalg.distributed import CoordinateMatrix, BlockMatrix\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1534789003767_563319531","id":"20180816-051038_545285622","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17334"},{"text":"%md\nNext, use `spark.read.csv` to read the big matrix (bigMatrix.txt) on the bucket URI: \n`gs://de-training-input/bigMatrix/bigMatrix.txt`.\n\nAnd again, as you did before the function already takes into account the commas. No need to map a split by “,” while reading the files. The objects will already be DataFrames.\n\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534789003768_561395786","id":"20180816-051039_1898536718","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17335"},{"text":"%pyspark\nbig_matrix = spark.read.csv(\"gs://de-training-input/matrices/matrixbig1a/*.csv.gz\")\n","user":"anonymous","dateUpdated":"2018-08-20T23:12:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1534789003768_561395786","id":"20180816-070420_1766932377","dateCreated":"2018-08-20T18:16:43+0000","dateStarted":"2018-08-20T23:12:19+0000","dateFinished":"2018-08-20T23:12:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17336"},{"text":"%md\nUnlike the Scala version, in PySpark we’ll use Tuples and DataFrames to work with the data.\n\n**Transform to tuples**\nNow that we have loaded the data into Spark as DataFrames, we need to transform them into Tuples. The code pieces you will require to do this are:\n* **.columns**: DataFrame attribute to manipulate its columns. It outputs a List of values. You can slice it similarly to a Python list.\n* **array()**: Receives a List of values to convert it into an array.\n* **posexplode()**: Transposes an array and adds the index position to the left. Output is two columns.\n* **.select()**: DataFrame method to extract or define new columns of data.\n\nStore the output of the final select in a variable for each Matrix.\n\n**HINT:** `_c0` can be used to reference the first column in the object read by `spark.read.csv` if no names were provided inside the file.\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Unlike the Scala version, in PySpark we’ll use Tuples and DataFrames to work with the data.</p>\n<p><strong>Transform to tuples</strong><br/>Now that we have loaded the data into Spark as DataFrames, we need to transform them into Tuples. The code pieces you will require to do this are:<br/>* <strong>.columns</strong>: DataFrame attribute to manipulate its columns. It outputs a List of values. You can slice it similarly to a Python list.<br/>* <strong>array()</strong>: Receives a List of values to convert it into an array.<br/>* <strong>posexplode()</strong>: Transposes an array and adds the index position to the left. Output is two columns.<br/>* <strong>.select()</strong>: DataFrame method to extract or define new columns of data.</p>\n<p>Store the output of the final select in a variable for each Matrix.</p>\n<p><strong>HINT:</strong> <code>_c0</code> can be used to reference the first column in the object read by <code>spark.read.csv</code> if no names were provided inside the file.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003769_561011037","id":"20180816-204921_95995530","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17337"},{"text":"%pyspark\nbig_matrix_e = big_matrix.select('_c0', posexplode(array(big_matrix.columns[1:])))\n\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1534789003769_561011037","id":"20180816-070426_2002522120","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17338"},{"text":"%md\nNow that we have converted all of our lines into coordinate `Tuples` (Triplets), we need to put them all inside a `BlockMatrix`. The function `create_blockMatrix`, defined in another notebook receives one of the previous objects and uses a `CoordinateMatrix` to output a `BlockMatrix`.","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now that we have converted all of our lines into coordinate <code>Tuples</code> (Triplets), we need to put them all inside a <code>BlockMatrix</code>. The function <code>create_blockMatrix</code>, defined in another notebook receives one of the previous objects and uses a <code>CoordinateMatrix</code> to output a <code>BlockMatrix</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003769_561011037","id":"20180816-205123_996053931","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17339"},{"text":"%pyspark\ndef create_blockMatrix(triplets):\n    return CoordinateMatrix(triplets.rdd.map(tuple)).toBlockMatrix()\n\n\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1534789003769_561011037","id":"20180816-051640_149771352","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17340"},{"text":"%md\nNow we convert the DataFrame into a `BlockMatrix`:","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now we convert each DataFrame into a <code>BlockMatrix</code>:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003769_561011037","id":"20180816-051434_624669525","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17341"},{"text":"%pyspark\nblock_big_M1 = create_blockMatrix(big_matrix_e)","dateUpdated":"2018-08-20T18:16:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1534789003770_562165284","id":"20180816-053544_199438445","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17342"},{"text":"%md\nNow image you have these polynomials where `x` is our Big Matrix and we need to save the result of each operation on a file\n\n```\n3x^3 + x^2\n```\nand\n\n```\nx^3 + 2x^2 + x\n```\n\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now image you have these polynomials where <code>x</code> is our Big Matrix and we need to save the result of each operation on a file</p>\n<pre><code>3x^3 + x^2\n</code></pre>\n<p>and</p>\n<pre><code>x^3 + 2x^2 + x\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003770_562165284","id":"20180820-033630_1442830526","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17343"},{"text":"%md\n\nIf we just run the operation like it is and save it, it would take a consider time to complete","dateUpdated":"2018-08-20T18:16:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If we just run the operation like it is and save it, it would take a consider time to complete</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003770_562165284","id":"20180820-033650_1995143958","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17344"},{"text":"%md\nWe define our `x`\n\n```\nx = block_big_M1\n```","user":"anonymous","dateUpdated":"2018-08-20T23:15:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We define our <code>x</code></p>\n<pre><code>x = block_big_M1\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1534806892304_-769791456","id":"20180820-231452_961590700","dateCreated":"2018-08-20T23:14:52+0000","dateStarted":"2018-08-20T23:15:04+0000","dateFinished":"2018-08-20T23:15:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17345"},{"text":"%md\nCalculate x^2 and x^3\n\n```\nx3 = x.multiply(x).multiply(x)\nx2 = x.multiply(x)\n```","user":"anonymous","dateUpdated":"2018-08-20T23:15:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Calculate x^2 and x^3</p>\n<pre><code>x3 = x.multiply(x).multiply(x)\nx2 = x.multiply(x)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1534806916112_-1536950115","id":"20180820-231516_1276893111","dateCreated":"2018-08-20T23:15:16+0000","dateStarted":"2018-08-20T23:15:23+0000","dateFinished":"2018-08-20T23:15:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17346"},{"text":"%md\nSave the x^2 and x^3\n\n```\nx2.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-<user-name>/bigMatrixExample-polynomialx2.txt\")\nx3.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-<user-name>/bigMatrixExample-polynomialx3.txt\")\n```","user":"anonymous","dateUpdated":"2018-08-20T23:15:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Save the x^2 and x^3</p>\n<pre><code>x2.toCoordinateMatrix().entries.saveAsTextFile(&quot;gs://de-training-output-&lt;user-name&gt;/bigMatrixExample-polynomialx2.txt&quot;)\nx3.toCoordinateMatrix().entries.saveAsTextFile(&quot;gs://de-training-output-&lt;user-name&gt;/bigMatrixExample-polynomialx3.txt&quot;)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1534806936079_-606765192","id":"20180820-231536_1661962113","dateCreated":"2018-08-20T23:15:36+0000","dateStarted":"2018-08-20T23:15:38+0000","dateFinished":"2018-08-20T23:15:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17347"},{"text":"%md\nCompute the result and save it\n\n```\nresult1 = x3.add(x3).add(x3).add(x2)\n\nresult1.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-<user-name>/bigMatrixExample-polynomial1.txt\")\n```","user":"anonymous","dateUpdated":"2018-08-20T23:16:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534806961601_-1542443869","id":"20180820-231601_1837852566","dateCreated":"2018-08-20T23:16:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18900","dateFinished":"2018-08-20T23:16:06+0000","dateStarted":"2018-08-20T23:16:06+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Compute the result and save it</p>\n<pre><code>result1 = x3.add(x3).add(x3).add(x2)\n\nresult1.toCoordinateMatrix().entries.saveAsTextFile(&quot;gs://de-training-output-&lt;user-name&gt;/bigMatrixExample-polynomial1.txt&quot;)\n</code></pre>\n</div>"}]}},{"text":"%md\nRepeat the proccess but now for our second polynomial\n\n```\nresult2a = x2.multiply(x).add(x2).add(x2).add(x)\n\nresult2a.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-<user-name>/bigMatrixExample-polynomial2a.txt\")\n```","user":"anonymous","dateUpdated":"2018-08-20T23:16:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534806976222_-336994916","id":"20180820-231616_509448012","dateCreated":"2018-08-20T23:16:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18968","dateFinished":"2018-08-20T23:16:20+0000","dateStarted":"2018-08-20T23:16:20+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Repeat the proccess but now for our second polynomial</p>\n<pre><code>result2a = x2.multiply(x).add(x2).add(x2).add(x)\n\nresult2a.toCoordinateMatrix().entries.saveAsTextFile(&quot;gs://de-training-output-&lt;user-name&gt;/bigMatrixExample-polynomial2a.txt&quot;)\n</code></pre>\n</div>"}]}},{"text":"%md\nHere, an other workaround to calculate the second polynomial\n\nWe calculate ` x^2 + x`\n```\nx3 = x.multiply(x).add(x)\n```\n\nThen `x^3 + x^2 + x^2 + x => x^3 + 2x^2 + x`\n```\nresult2b = x3.multiply(x).add(x3)\n```\n\nAnd at least, we save the result\n```\nresult2b.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-<user-name>/bigMatrixExample-polynomial2b.txt\")\n```","user":"anonymous","dateUpdated":"2018-08-20T23:17:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534807013093_1111200467","id":"20180820-231653_142388423","dateCreated":"2018-08-20T23:16:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19036","dateFinished":"2018-08-20T23:17:14+0000","dateStarted":"2018-08-20T23:17:14+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Here, an other workaround to calculate the second polynomial</p>\n<p>We calculate <code>x^2 + x</code></p>\n<pre><code>x3 = x.multiply(x).add(x)\n</code></pre>\n<p>Then <code>x^3 + x^2 + x^2 + x =&gt; x^3 + 2x^2 + x</code></p>\n<pre><code>result2b = x3.multiply(x).add(x3)\n</code></pre>\n<p>And at least, we save the result</p>\n<pre><code>result2b.toCoordinateMatrix().entries.saveAsTextFile(&quot;gs://de-training-output-&lt;user-name&gt;/bigMatrixExample-polynomial2b.txt&quot;)\n</code></pre>\n</div>"}]}},{"text":"%md\nWe are going to define a variable to be used instead of your username, **please modify it!**%md\n","user":"anonymous","dateUpdated":"2018-08-20T23:17:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534807050800_1011427909","id":"20180820-231730_107138662","dateCreated":"2018-08-20T23:17:30+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19160"},{"text":"%pyspark\ntheUsername = \"<user-name>\"","user":"anonymous","dateUpdated":"2018-08-20T23:18:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534807064324_-855373755","id":"20180820-231744_2071647052","dateCreated":"2018-08-20T23:17:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19223","dateFinished":"2018-08-20T23:18:04+0000","dateStarted":"2018-08-20T23:18:04+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\nx = block_big_M1\nx3 = x.multiply(x).multiply(x)\nx2 = x.multiply(x)\nx2.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomialx2.txt\".format(user-name=theUsername))\nx3.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomialx3.txt\".format(user-name=theUsername))\\\nresult1 = x3.add(x3).add(x3).add(x2)\nresult1.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomial1.txt\".format(user-name=theUsername))\nresult2a = x2.multiply(x).add(x2).add(x2).add(x)\nresult2a.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomial2a.txt\".format(user-name=theUsername))\nx3 = x.multiply(x).add(x)\nresult2b = x3.multiply(x).add(x3)\nresult2b.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomial2b.txt\".format(user-name=theUsername))","dateUpdated":"2018-08-20T23:20:36+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:32: error: not found: value x\nval $ires6 = x\n             ^\n<console>:30: error: not found: value x\n       x = block_big_M1\n       ^\n"}]},"apps":[],"jobName":"paragraph_1534789003770_562165284","id":"20180820-033706_527445888","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17348"},{"text":"%md\n\nDo you see how much time is needed to complete the operation?\n\nLet's apply some cache","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Do you see how much time is needed to complete the operation?</p>\n<p>Let&rsquo;s apply some cache</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003771_561780535","id":"20180820-033816_1329585677","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17349"},{"text":"%md\n**Note:** we are converting the `BlockMatrix` back to `CoordinateMatrix` for writing purposes.","dateUpdated":"2018-08-20T18:16:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Note:</strong> we are converting the <code>BlockMatrix</code> back to <code>CoordinateMatrix</code> for writing purposes.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003771_561780535","id":"20180820-033838_474218296","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17350"},{"text":"%md\nOnce the computation is over, save the results to your output bucket. To do so, you will need to transform the `matrix` object into a `CoordinateMatrix`. Then point to its `entries` attribute, using the `saveAsTextFile` method. Use the following GCS URI template:\nMake sure to replace `<user-name>` with your personal username ID.\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Once the computation is over, save the results to your output bucket. To do so, you will need to transform the <code>matrix</code> object into a <code>CoordinateMatrix</code>. Then point to its <code>entries</code> attribute, using the <code>saveAsTextFile</code> method. Use the following GCS URI template:<br/>Make sure to replace <code>&lt;user-name&gt;</code> with your personal username ID.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003771_561780535","id":"20180820-033838_687356086","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17351"},{"text":"%md\nAlso, cache applied to `x2`, so it will not be computed again.\n\n```\nx2 = x.multiply(x).cache()\n```","user":"anonymous","dateUpdated":"2018-08-20T23:22:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534807351233_524349481","id":"20180820-232231_2027801276","dateCreated":"2018-08-20T23:22:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19300","dateFinished":"2018-08-20T23:22:41+0000","dateStarted":"2018-08-20T23:22:41+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Also, cache applied to <code>x2</code>, so it will not be computed again.</p>\n<pre><code>x2 = x.multiply(x).cache()\n</code></pre>\n</div>"}]}},{"text":"%md\nAnd at least the cache is applied to `x3bis`\n\n```\nx3bis = x.multiply(x).add(x)\n```","user":"anonymous","dateUpdated":"2018-08-20T23:30:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534807377916_1612681526","id":"20180820-232257_1562649613","dateCreated":"2018-08-20T23:22:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19368","dateFinished":"2018-08-20T23:30:23+0000","dateStarted":"2018-08-20T23:30:23+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>And at least the cache is applied to <code>x3bis</code></p>\n<pre><code>x3bis = x.multiply(x).add(x)\n</code></pre>\n</div>"}]}},{"text":"%pyspark\nx = blockBigMatrix\nx.cache()\nx2 = x.multiply(x).cache()\nx3 = x2.multiply(x)\nx2.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomialx2Cache.txt\".format(user-name=theUsername))\nx3.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomialx3Cache.txt\".format(user-name=theUsername))\nresult1 = x3.add(x3).add(x3).add(x2)\nresult1.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomial1Cache.txt\".format(user-name=theUsername))\nresult2a = x2.multiply(x).add(x2).add(x2).add(x)\nresult2a.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomial2aCache.txt\".format(user-name=theUsername))\nx3bis = x.multiply(x).add(x).cache()\nresult2b = x3bis.multiply(x).add(x3bis)\nresult2b.toCoordinateMatrix().entries.saveAsTextFile(\"gs://de-training-output-{user-name}/bigMatrixExample-polynomial2bCache.txt\".format(user-name=theUsername))","dateUpdated":"2018-08-20T23:30:13+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534789003771_561780535","id":"20180820-033916_1722640687","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17352"},{"title":"Exercise Time!","text":"%md\n\nCalculate this polynomial,and write the result in: `\"gs://de-training-output-<user-name>/bigMatrixExample-exerciseResult.txt\"`\n\n```\nx^11 + x^9 + x^7 + x^5 + x^4 + x^3 + x^2 + x\n```","dateUpdated":"2018-08-20T18:16:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Calculate this polynomial,and write the result in: <code>&quot;gs://de-training-output-&lt;user-name&gt;/bigMatrixExample-exerciseResult.txt&quot;</code></p>\n<pre><code>x^11 + x^9 + x^7 + x^5 + x^4 + x^3 + x^2 + x\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1534789003771_561780535","id":"20180820-034032_1269478513","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17353"},{"text":"%md\n","dateUpdated":"2018-08-20T18:16:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1534789003772_559856791","id":"20180820-040451_1208678663","dateCreated":"2018-08-20T18:16:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17354"}],"name":"Matrix-Multiplication with Cache in Python","id":"2DQKNESV2","angularObjects":{"2DNRZQXJB:shared_process":[],"2DN3RRF4F:shared_process":[],"2DRBJHYJ2:shared_process":[],"2DQ88XWSE:shared_process":[],"2DQ27TTYQ:shared_process":[],"2DP45QAQ8:shared_process":[],"2DMM3546T:shared_process":[],"2DPKVYVTH:shared_process":[],"2DN8SH6T8:shared_process":[],"2DP7DT266:shared_process":[],"2DP6U5WSE:shared_process":[],"2DN4VWF96:shared_process":[],"2DNFEFDSE:shared_process":[],"2DNYX7V6X:shared_process":[],"2DQS317EX:shared_process":[],"2DQH3WH7M:shared_process":[],"2DNTPNGFJ:shared_process":[],"2DPK5Q3GF:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}